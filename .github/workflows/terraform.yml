name: 'Build and Deploy'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read
  id-token: write

env:
  IMAGE_NAME: helloapp

jobs:
  docker:
    name: Build and push image to container repo
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Log into registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACR_ENDPOINT }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}:app"
          push: true
          tags: ${{ secrets.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}:latest
          #file: app/Dockerfile

  terraform:
    name: 'Deploy service'
    needs: docker
    runs-on: ubuntu-latest
    environment: production
    outputs:
      group-id: ${{ steps.set-group-id.outputs.group-id }}
    
    env:
        ARM_SUBSCRIPTION_ID : e1fec9f3-3d89-4113-8eaf-d8915babcf59
        ARM_TENANT_ID : c894abff-2699-4efc-a196-8e1565ec8b93
        ARM_CLIENT_ID : cfb23b33-17f6-475c-b1b0-f3cfaeb5446a
        ARM_USE_OIDC : true

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Setup OIDC auth to GCP
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0.3.1'
      with:
        create_credentials_file: true
        workload_identity_provider: 'projects/84251699846/locations/global/workloadIdentityPools/github-actions/providers/github-actions-arcrowe'
        service_account: 'github-actions@hashiconf-demo-364100.iam.gserviceaccount.com'
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init - Infrastructure and Environment
      run: terraform init -upgrade

    # Generates an execution plan for Terraform
    - name: Terraform Plan - Infrastructure and Environment
      run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply - Infrastructure and Environment
      #if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
    #- run: echo group_id=$(terraform output group_object_id) >> $GITHUB_ENV
    - name: set-group-id
      run: echo "::set-output name=test::$(terraform output group_object_id)"
      
    - name: Terraform Init - App Deployment
      run: terraform -chdir=kube-module init -upgrade
        
    - name: Terraform Plan - App Deployment
      run: terraform -chdir=kube-module plan -input=false

    - name: Terraform Apply - App Deployment
      run: terraform -chdir=kube-module apply -auto-approve -input=false
      
  pim:
    name: Set up Privileged Access Group
    runs-on: windows-2019
    needs: terraform
    environment: production
    steps:
    - name: Check out repo        
      uses: actions/checkout@v2
    - name: Run Script
      shell: powershell
      run: |
          ./pim.ps1 "${{ secrets.POWERSHELL_USERNAME }}" "${{ secrets.POWERSHELL_PASSWORD }}" "${{needs.terraform.outputs.group-id}}"
          
    
  
